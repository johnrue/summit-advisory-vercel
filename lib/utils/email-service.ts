import { Resend } from 'resend'
import { TOPSComplianceEmail } from '@/lib/templates/tops-compliance-email'
import type { TOPSReportData } from '@/lib/types'

// Initialize Resend with API key from environment
// Use a placeholder key during build time if not available
const resend = new Resend(process.env.RESEND_API_KEY || 're_placeholder_key')

export interface EmailAttachment {
  filename: string
  content: Buffer
  contentType: string
}

export interface ComplianceEmailData {
  reportData: TOPSReportData
  reportUrl: string
  recipients: string[]
  attachments?: EmailAttachment[]
}

/**
 * Email Service for TOPS compliance report delivery
 * Uses Resend API for reliable email delivery
 */
export class EmailService {
  
  /**
   * Send TOPS compliance report via email
   */
  static async sendComplianceReport({
    reportData,
    reportUrl,
    recipients,
    attachments = []
  }: ComplianceEmailData): Promise<{ success: boolean; messageId?: string; error?: string }> {
    try {
      const subject = `TOPS Compliance Report - ${reportData.reportPeriod.startDate.toLocaleDateString()} to ${reportData.reportPeriod.endDate.toLocaleDateString()}`
      
      // Prepare email attachments
      const emailAttachments = attachments.map(attachment => ({
        filename: attachment.filename,
        content: attachment.content,
        contentType: attachment.contentType
      }))

      const { data, error } = await resend.emails.send({
        from: 'Summit Advisory Compliance <compliance@summitadvisoryfirm.com>',
        to: recipients,
        subject: subject,
        react: TOPSComplianceEmail({
          reportData,
          reportUrl,
          recipientEmail: recipients[0] // Primary recipient for personalization
        }),
        attachments: emailAttachments.length > 0 ? emailAttachments : undefined,
        tags: [
          { name: 'type', value: 'compliance-report' },
          { name: 'report-type', value: 'tops' },
          { name: 'company', value: 'summit-advisory' }
        ]
      })

      if (error) {
        console.error('Error sending compliance report email:', error)
        return { success: false, error: error.message }
      }

      return { success: true, messageId: data?.id }

    } catch (error) {
      console.error('Unexpected error sending email:', error)
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error occurred' 
      }
    }
  }

  /**
   * Send report generation failure notification
   */
  static async sendReportFailureNotification(
    error: string,
    reportParameters: any,
    recipients: string[]
  ): Promise<{ success: boolean; messageId?: string; error?: string }> {
    try {
      const subject = 'TOPS Compliance Report Generation Failed'

      const { data, error: emailError } = await resend.emails.send({
        from: 'Summit Advisory System <system@summitadvisoryfirm.com>',
        to: recipients,
        subject: subject,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #dc3545;">Report Generation Failed</h2>
            <p>The TOPS compliance report generation failed with the following error:</p>
            <div style="background: #f8f9fa; padding: 15px; border-left: 4px solid #dc3545; margin: 15px 0;">
              <code>${error}</code>
            </div>
            <h3>Report Parameters:</h3>
            <ul>
              <li><strong>Start Date:</strong> ${reportParameters.startDate}</li>
              <li><strong>End Date:</strong> ${reportParameters.endDate}</li>
              <li><strong>Format:</strong> ${reportParameters.format}</li>
              <li><strong>Generated By:</strong> ${reportParameters.generatedBy}</li>
            </ul>
            <p>Please check the system logs and try generating the report again.</p>
          </div>
        `,
        tags: [
          { name: 'type', value: 'error-notification' },
          { name: 'report-type', value: 'tops' },
          { name: 'company', value: 'summit-advisory' }
        ]
      })

      if (emailError) {
        console.error('Error sending failure notification:', emailError)
        return { success: false, error: emailError.message }
      }

      return { success: true, messageId: data?.id }

    } catch (error) {
      console.error('Unexpected error sending failure notification:', error)
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error occurred' 
      }
    }
  }

  /**
   * Send scheduled report reminder
   */
  static async sendScheduledReportReminder(
    scheduleName: string,
    nextRunDate: Date,
    recipients: string[]
  ): Promise<{ success: boolean; messageId?: string; error?: string }> {
    try {
      const subject = `Scheduled TOPS Report Reminder - ${scheduleName}`

      const { data, error: emailError } = await resend.emails.send({
        from: 'Summit Advisory Compliance <compliance@summitadvisoryfirm.com>',
        to: recipients,
        subject: subject,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #d4af37;">Scheduled Report Reminder</h2>
            <p>This is a reminder that the following TOPS compliance report is scheduled to run:</p>
            <div style="background: #f0f8ff; padding: 15px; border-left: 4px solid #d4af37; margin: 15px 0;">
              <h3 style="margin-top: 0;">${scheduleName}</h3>
              <p><strong>Next Run:</strong> ${nextRunDate.toLocaleString()}</p>
            </div>
            <p>The report will be automatically generated and delivered to all configured recipients.</p>
            <p>If you need to modify the schedule or recipients, please log into the Summit Advisory management platform.</p>
          </div>
        `,
        tags: [
          { name: 'type', value: 'reminder' },
          { name: 'report-type', value: 'tops' },
          { name: 'company', value: 'summit-advisory' }
        ]
      })

      if (emailError) {
        console.error('Error sending reminder:', emailError)
        return { success: false, error: emailError.message }
      }

      return { success: true, messageId: data?.id }

    } catch (error) {
      console.error('Unexpected error sending reminder:', error)
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error occurred' 
      }
    }
  }

  /**
   * Validate email configuration
   */
  static validateConfiguration(): { valid: boolean; error?: string } {
    if (!process.env.RESEND_API_KEY) {
      return { valid: false, error: 'RESEND_API_KEY environment variable not set' }
    }

    // Additional validation could be added here (API key format, etc.)
    return { valid: true }
  }
}